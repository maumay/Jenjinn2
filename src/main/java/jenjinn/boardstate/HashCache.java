/**
 *
 */
package jenjinn.boardstate;

import java.util.Arrays;

/**
 * @author ThomasB
 */
public final class HashCache
{
	public static final int CACHE_SIZE = 12;

	private final long[] hashCache;
	private int totalHalfMoveCount, cacheIndexer;

	public HashCache(long[] hashCache, int halfMoveCount)
	{
		if (hashCache.length != CACHE_SIZE) {
			throw new IllegalArgumentException();
		}
		this.hashCache = Arrays.copyOf(hashCache, CACHE_SIZE);
		this.totalHalfMoveCount = halfMoveCount;
		updateCacheIndexer();
	}

	public HashCache()
	{
		this(new long[CACHE_SIZE], 0);
	}

	public long incrementHalfMoveCount(long newHash)
	{
		totalHalfMoveCount++;
		updateCacheIndexer();
		long discardedHash = hashCache[cacheIndexer];
		hashCache[cacheIndexer] = newHash;
		return discardedHash;
	}

	public void decrementHalfMoveCount(long replacementHash)
	{
		hashCache[cacheIndexer] = replacementHash;
		totalHalfMoveCount--;
		updateCacheIndexer();
	}

	private void updateCacheIndexer()
	{
		cacheIndexer = totalHalfMoveCount % CACHE_SIZE;
	}

	public long getCurrentHash()
	{
		return hashCache[cacheIndexer];
	}

	public HashCache copy()
	{
		return new HashCache(Arrays.copyOf(hashCache, CACHE_SIZE), totalHalfMoveCount);
	}

	public long[] getCacheCopy()
	{
		return Arrays.copyOf(hashCache, CACHE_SIZE);
	}

	public int getHalfMoveCount()
	{
		return totalHalfMoveCount;
	}

	public boolean containsThreeRepetitions()
	{
		if (totalHalfMoveCount < CACHE_SIZE) {
			return false;
		}
		else {
			long[] cpy = Arrays.copyOf(hashCache, CACHE_SIZE);
			Arrays.sort(cpy);
			int sameCount = 1;
			long last = cpy[0];
			for (int i = 1; i < CACHE_SIZE && sameCount < 3; i++) {
				long next = cpy[i];
				if (next == last) {
					sameCount++;
				}
				else {
					sameCount = 1;
					last = next;
				}
			}
			return sameCount == 3;
		}
	}

	@Override
	public String toString()
	{
		return new StringBuilder("StateHashCache[")
				.append("hash values:")
				.append(Arrays.toString(hashCache))
				.append(", clock value:")
				.append(totalHalfMoveCount)
				.append("]")
				.toString();
	}

	/*
	 * Generated by Eclipse.
	 */
	@Override
	public int hashCode()
	{
		int prime = 31;
		int result = 1;
		result = prime * result + cacheIndexer;
		result = prime * result + Arrays.hashCode(hashCache);
		result = prime * result + totalHalfMoveCount;
		return result;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		HashCache other = (HashCache) obj;
		if (cacheIndexer != other.cacheIndexer)
			return false;
		if (!Arrays.equals(hashCache, other.hashCache))
			return false;
		if (totalHalfMoveCount != other.totalHalfMoveCount)
			return false;
		return true;
	}
}
