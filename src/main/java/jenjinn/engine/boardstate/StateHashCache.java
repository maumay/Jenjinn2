/**
 *
 */
package jenjinn.engine.boardstate;

import java.util.Arrays;

/**
 * @author ThomasB
 */
public final class StateHashCache
{
	private static final int CACHE_SIZE = 12;

	private final long[] hashCache = new long[CACHE_SIZE];
	private int totalHalfMoveCount = 0, cacheIndexer = 0;

	private StateHashCache() {
	}

	public static StateHashCache getGameStartCache()
	{
		throw new RuntimeException();
	}

	public long incrementHalfMoveCount()
	{
		final long currentHash = hashCache[cacheIndexer];
		totalHalfMoveCount++;
		updateCacheIndexer();
		final long discardedHash = hashCache[cacheIndexer];
		hashCache[cacheIndexer] = currentHash;
		return discardedHash;
	}

	public void decrementHalfMoveCount(final long replacementHash)
	{
		hashCache[cacheIndexer] = replacementHash;
		totalHalfMoveCount--;
		updateCacheIndexer();
	}

	private void updateCacheIndexer()
	{
		cacheIndexer = totalHalfMoveCount % CACHE_SIZE;
	}

	public void xorFeatureWithCurrentHash(final long feature)
	{
		hashCache[cacheIndexer] ^= feature;
	}

	/*
	 * Generated by Eclipse.
	 */
	@Override
	public int hashCode()
	{
		final int prime = 31;
		int result = 1;
		result = prime * result + cacheIndexer;
		result = prime * result + Arrays.hashCode(hashCache);
		result = prime * result + totalHalfMoveCount;
		return result;
	}

	@Override
	public boolean equals(final Object obj)
	{
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		final StateHashCache other = (StateHashCache) obj;
		if (cacheIndexer != other.cacheIndexer)
			return false;
		if (!Arrays.equals(hashCache, other.hashCache))
			return false;
		if (totalHalfMoveCount != other.totalHalfMoveCount)
			return false;
		return true;
	}
}
